{"remainingRequest":"/Users/hngskj/Projects/webapp/labnote/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/hngskj/Projects/webapp/labnote/node_modules/vuetify-loader/lib/loader.js??ref--18-0!/Users/hngskj/Projects/webapp/labnote/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/hngskj/Projects/webapp/labnote/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hngskj/Projects/webapp/labnote/src/views/Note.vue?vue&type=template&id=0473cba8&","dependencies":[{"path":"/Users/hngskj/Projects/webapp/labnote/src/views/Note.vue","mtime":1579734426818},{"path":"/Users/hngskj/Projects/webapp/labnote/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hngskj/Projects/webapp/labnote/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/hngskj/Projects/webapp/labnote/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/hngskj/Projects/webapp/labnote/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hngskj/Projects/webapp/labnote/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}